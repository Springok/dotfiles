"================ General ================
" unmap some key mapping in maximum awesome
unmap <leader>t
unmap <leader>a
unmap <leader>g
unmap <leader>l

source ~/dotfiles/.vim/minitest_helper.vim

set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

" fix the problem on lagging issue on using relativenumber (syntax highlight)
" ref: vim/vim#282
"      vim-ruby/vim-ruby#243
set regexpengine=1
" set lazyredraw

set nocursorline
set relativenumber
" set hlsearch   " highlight all matches for the last used search pattern
set noswapfile " disable .swp files creation in vim
set hidden     " allow you to switch between buffers without saving
" Faster escape
set noesckeys

nmap <leader>ns :set nospell<cr>

noremap 0 $

" indenting
noremap <leader>i mmgg=G'm

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk
nmap <leader>p obinding.pry<ESC>^

nmap <leader>w <C-w>
" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" buffer switch
nnoremap <silent> <tab> :bn<CR>
nnoremap <silent> <S-tab> :bp<CR>

" tab switch
nnoremap gr gT

" NerdTree Setting
let NERDTreeQuitOnOpen = 1

" git commit textwidth limit
autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd BufRead,BufNewFile *.md set nospell

" Note that remapping C-s requires flow control to be disabled (in .zshrc)
nmap <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>

" Close current buffer
nmap <leader>q <esc>:bw<cr>
imap <leader>q <esc>:bw<cr>

" in all modes hit ,, can return to normal mode
noremap  ,, <C-\><C-N>
noremap!  ,, <C-\><C-N>

" hit jj back to normal mode from insert mode
inoremap jj <ESC>

" vim-gitgutter
nnoremap <leader>gg :GitGutterToggle<CR>

" Fugitive
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gb :Gblame<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gs :Gstatus<cr>

" Rails
nmap <leader>aa :A<CR>
nmap <leader>av :AV<CR>
nmap <leader>gr :R<CR>

" Ag
nmap <leader>ab :AgBuffer<space>
nmap <leader>ag :Ag<space>

" Vim-test
" let test#strategy = "dispatch"
" need to setup this to make binding.pry works...
let g:test#ruby#minitest#executable = 'bundle exec ruby -Itest'
" let test#ruby#minitest#options = '--verbose'
nmap <silent> <leader><C-t> :TestNearest<CR>
nmap <silent> <leader><C-f> :TestFile<CR>
nmap <silent> <leader><C-l> :TestLast<CR>

"================ Theme ================
" Dracula
color dracula
let g:airline_theme='dracula'

" vim-airline
" smart tab line, automatically displays all buffers when there's only one tab open.
let g:airline#extensions#tabline#enabled = 1

" https://github.com/vim-airline/vim-airline#integrating-with-powerline-fonts
let g:airline_powerline_fonts = 1
let g:airline_left_sep         = '⮀'
let g:airline_left_alt_sep     = '⮁'
let g:airline_right_sep        = '⮂'
let g:airline_right_alt_sep    = '⮃'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_symbols.branch   = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr   = '⭡'

"===========================================

let g:gitgutter_enabled = 1

" vim-easy-align
" override default ignore comment and string in vim-easy-align
let g:easy_align_ignore_groups = []
" start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)
" start interactive EasyAlign for a motion/text object (e.g. <leader>eaip)
nmap <leader>l <Plug>(EasyAlign)

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

"================= Helper =================
" run sql file to give your the result table!
" usage: <leader_key>p + j, l, r
function! s:init_qrpsqlpq()
  nmap <buffer> <Leader>p [qrpsqlpq]
  nnoremap <silent> <buffer> [qrpsqlpq]j :call qrpsqlpq#run('split')<CR>
  nnoremap <silent> <buffer> [qrpsqlpq]l :call qrpsqlpq#run('vsplit')<CR>
  nnoremap <silent> <buffer> [qrpsqlpq]r :call qrpsqlpq#run()<CR>

  if !exists('b:rails_root')
    call RailsDetect()
  endif
  if !exists('b:rails_root')
    let b:qrpsqlpq_db_name = 'postgres'
  endif
endfunction

if executable('psql')
  let g:qrpsqlpq_expanded_format_max_lines = -1
  autocmd FileType sql call s:init_qrpsqlpq()
endif

" Vim Tmux Runner
nnoremap <leader>or :VtrOpenRunner {'orientation': 'h', 'percentage': 50}<cr>
nnoremap <leader>ar :VtrAttachToPane<cr>
nnoremap <leader>kr :VtrKillRunner<cr>
nnoremap <leader>sl :VtrSendLinesToRunner<cr>
nnoremap <leader>sc :VtrSendCommandToRunner<cr>
nnoremap <leader>cc :VtrFlushCommand<cr>
nnoremap <leader>orc :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'rc'}<cr>

" keep set secure on the last line
set secure " safer working with script files in the current directory
